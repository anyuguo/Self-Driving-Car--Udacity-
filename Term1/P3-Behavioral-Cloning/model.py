# -*- coding: utf-8 -*-
"""
Created on Mon Aug 19 17:47:52 2019

@author: AskLan
"""

import csv
import numpy as np
import matplotlib.image as mpimg
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
import cv2
from keras.models import Sequential
from keras.layers.core import Dense, Flatten, Activation, Dropout
from keras.layers.convolutional import Convolution2D
from keras.layers import Lambda, Cropping2D
import math

samples = []

with open('data/driving_log.csv') as csvfile:
    reader = csv.reader(csvfile)
    for line in reader:
        samples.append(line)
a = samples[0]
del(samples[0])

#splitting the dataset to train and validation set
train_samples, validation_samples = train_test_split(samples,test_size=0.15)

#data preprocess
def preprocess(samples, batch_size = 32):
    num_samples = len(samples)
    
    #loop forever so the generator never terminates
    while 1:
        shuffle(samples)
        
        for offset in range(0, num_samples, batch_size):
            
            batch_samples = samples[offset:offset+batch_size]
    
            images = []
            angles = []
            for batch_sample in batch_samples:
                
                for i in range(0,3): 
                    
                    name = 'data/IMG/'+batch_sample[i].split('/')[-1]
                    center_image = mpimg.imread(name)
                    #center_image = cv2.cvtColor(cv2.imread(name), cv2.COLOR_BGR2RGB)
                    #steering angle
                    center_angle = float(batch_sample[3])
                    images.append(center_image)
    
                    
                    if(i == 0):
                        angles.append(center_angle)
                    elif(i == 1):
                        angles.append(center_angle+0.2)
                    elif(i == 2):
                        angles.append(center_angle-0.2)
                    
                    #augmentation of data.
                    #flip images and negate the measurement
                    
                    images.append(cv2.flip(center_image,1))
                    if(i==0):
                        angles.append(center_angle*-1)
                    elif(i==1):
                        angles.append((center_angle+0.2)*-1)
                    elif(i==2):
                        angles.append((center_angle-0.2)*-1)   
                        
        
            X_train = np.array(images)
            y_train = np.array(angles)
                
            yield shuffle(X_train, y_train)

train_preprocess = preprocess(train_samples, batch_size=32)
validation_preprocess = preprocess(validation_samples, batch_size=32)


#Train model

model = Sequential()

#normalization
model.add(Lambda(lambda x: (x / 255.0) - 0.5, input_shape=(160,320,3)))

#crop 70 rows pixels from the top of the image, 25 rows from the bottom
model.add(Cropping2D(cropping=((70,25),(0,0))))           

#layer 1- Convolution, no of filters- 24, filter size= 5x5, stride= 2x2
model.add(Convolution2D(24,5,5,subsample=(2,2)))
model.add(Activation('elu'))

#layer 2- Convolution, no of filters- 36, filter size= 5x5, stride= 2x2
model.add(Convolution2D(36,5,5,subsample=(2,2)))
model.add(Activation('elu'))

#layer 3- Convolution, no of filters- 48, filter size= 5x5, stride= 2x2
model.add(Convolution2D(48,5,5,subsample=(2,2)))
model.add(Activation('elu'))

#layer 4- Convolution, no of filters- 64, filter size= 3x3, stride= 1x1
model.add(Convolution2D(64,3,3))
model.add(Activation('elu'))

#layer 5- Convolution, no of filters- 64, filter size= 3x3, stride= 1x1
model.add(Convolution2D(64,3,3))
model.add(Activation('elu'))

#flatten image from 2D to side by side
model.add(Flatten())

#layer 6- fully connected layer 1
model.add(Dense(100))
model.add(Activation('elu'))

#Adding a dropout layer to avoid overfitting. Here we are have given the dropout rate as 25% after first fully connected layer
model.add(Dropout(0.25))

#layer 7- fully connected layer 2
model.add(Dense(50))
model.add(Activation('elu'))


#layer 8- fully connected layer 3
model.add(Dense(10))
model.add(Activation('elu'))

#layer 9- fully connected layer 4
#output is the steering angle
model.add(Dense(1))

#mean squared error loss function and adam optimizer is used here
model.compile(loss='mse',optimizer='adam')

#fit generator is used here as the number of images are generated by the generator
# no of epochs : 5

model.fit_generator(train_preprocess, 
                    samples_per_epoch= math.ceil(len(train_samples)/32), 
                    validation_data=validation_preprocess, 
                    nb_val_samples=math.ceil(len(validation_samples)/32), 
                    nb_epoch=5, 
                    verbose=1)

#saving model
model.save('model.h5')

print('Done! Model Saved!')

# keras method to print the model summary
model.summary()